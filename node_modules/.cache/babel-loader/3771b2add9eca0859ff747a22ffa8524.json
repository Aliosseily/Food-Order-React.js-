{"ast":null,"code":"var _jsxFileName = \"C:\\\\React.js\\\\food-order\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n}; // state is the latest state snapshot of the state managed by the reducer\n// action is the saction dispatched by you later in yur code\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    //findIndex to find the index of item in array\n    // this will return the index of the item if it exists\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    console.log(\"existingCartItemIndex\", existingCartItemIndex);\n    const updatedItems = state.items.concat(action.item);\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  // the first element is always the state snapshot\n  // the second element is the function that allows you to dispatch action to the reducer\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n    console.log(\"Add\");\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"ADD\",\n      id: id\n    });\n    console.log(\"Remove\");\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/React.js/food-order/src/store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","existingCartItemIndex","findIndex","item","id","console","log","updatedItems","concat","updatedTotalAmount","price","amount","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,WAAW,EAAE;AAFU,CAAzB,C,CAIA;AACA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AACzB;AACA;AACD,UAAMC,qBAAqB,GAAGH,KAAK,CAACH,KAAN,CAAYO,SAAZ,CAAsBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYL,MAAM,CAACI,IAAP,CAAYC,EAAtD,CAA9B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAoCL,qBAApC;AACA,UAAMM,YAAY,GAAGT,KAAK,CAACH,KAAN,CAAYa,MAAZ,CAAmBT,MAAM,CAACI,IAA1B,CAArB;AAEC,UAAMM,kBAAkB,GACtBX,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACI,IAAP,CAAYO,KAAZ,GAAoBX,MAAM,CAACI,IAAP,CAAYQ,MADtD;AAEA,WAAO;AACLhB,MAAAA,KAAK,EAAEY,YADF;AAELX,MAAAA,WAAW,EAAEa;AAFR,KAAP;AAID;;AAED,SAAOf,gBAAP;AACD,CAjBD;;AAmBA,MAAMkB,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B;AACA;AACA,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCvB,UAAU,CAChDK,WADgD,EAEhDH,gBAFgD,CAAlD;;AAIA,QAAMsB,oBAAoB,GAAIb,IAAD,IAAU;AACrCY,IAAAA,kBAAkB,CAAC;AAAEf,MAAAA,IAAI,EAAE,KAAR;AAAeG,MAAAA,IAAI,EAAEA;AAArB,KAAD,CAAlB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACD,GAHD;;AAIA,QAAMW,yBAAyB,GAAIb,EAAD,IAAQ;AACxCW,IAAAA,kBAAkB,CAAC;AAAEf,MAAAA,IAAI,EAAE,KAAR;AAAeI,MAAAA,EAAE,EAAEA;AAAnB,KAAD,CAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD,GAHD;;AAKA,QAAMY,WAAW,GAAG;AAClBvB,IAAAA,KAAK,EAAEmB,SAAS,CAACnB,KADC;AAElBC,IAAAA,WAAW,EAAEkB,SAAS,CAAClB,WAFL;AAGlBuB,IAAAA,OAAO,EAAEH,oBAHS;AAIlBI,IAAAA,UAAU,EAAEH;AAJM,GAApB;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACGL,KAAK,CAACQ;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA5BD;;GAAMT,Y;;KAAAA,Y;AA8BN,eAAeA,YAAf","sourcesContent":["import { useReducer } from \"react\";\r\nimport CartContext from \"./cart-context\";\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\n// state is the latest state snapshot of the state managed by the reducer\r\n// action is the saction dispatched by you later in yur code\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === \"ADD\") {\r\n    //findIndex to find the index of item in array\r\n    // this will return the index of the item if it exists\r\n   const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id)\r\n   console.log(\"existingCartItemIndex\",existingCartItemIndex)\r\n   const updatedItems = state.items.concat(action.item);\r\n\r\n    const updatedTotalAmount =\r\n      state.totalAmount + action.item.price * action.item.amount;\r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatedTotalAmount,\r\n    };\r\n  }\r\n\r\n  return defaultCartState;\r\n};\r\n\r\nconst CartProvider = (props) => {\r\n  // the first element is always the state snapshot\r\n  // the second element is the function that allows you to dispatch action to the reducer\r\n  const [cartState, dispatchCartAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartState\r\n  );\r\n  const addItemToCartHandler = (item) => {\r\n    dispatchCartAction({ type: \"ADD\", item: item });\r\n    console.log(\"Add\");\r\n  };\r\n  const removeItemFromCartHandler = (id) => {\r\n    dispatchCartAction({ type: \"ADD\", id: id });\r\n    console.log(\"Remove\");\r\n  };\r\n\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}