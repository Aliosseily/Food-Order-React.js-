{"ast":null,"code":"var _jsxFileName = \"C:\\\\React.js\\\\food-order\\\\src\\\\components\\\\Meals\\\\AvailableMeals.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport styles from \"./AvailableMeals.module.css\";\nimport Card from \"../UI/Card\";\nimport MealItem from \"./MealItem/MealItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AvailableMeals = props => {\n  _s();\n\n  const [meals, setMeals] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(''); // the function you pass to useEffect should not return a promise\n  //useEffect( async () => { }, []); you can't do it like this\n  // instead the function u pass to useEffect ma y return a cleanup function which can be executed\n  //this cleanupr run syncronously and not return a promise\n\n  useEffect(() => {\n    const fetchMeals = async () => {\n      try {\n        const response = await fetch(\"https://react-http-9a2e3-default-rtdb.asia-southeast1.firebasdfedatabase.app/meadls.json\");\n\n        if (!response.ok) {\n          throw new Error(\"Something wen wrong\");\n        }\n\n        const responseData = await response.json();\n        console.log(\"data\", responseData);\n        const loadedMeals = [];\n\n        for (const key in responseData) {\n          loadedMeals.push({\n            id: key,\n            name: responseData[key].name,\n            description: responseData[key].description,\n            price: responseData[key].price\n          });\n        }\n\n        setMeals(loadedMeals);\n        setIsLoading(false);\n      } catch (err) {\n        console.log(\"errrrrrrrrrrrrrror\", err); //setError(erro)\n      }\n    };\n\n    fetchMeals();\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: styles.MealsLoading,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  }\n\n  const mealsList = meals.map(meal => /*#__PURE__*/_jsxDEV(MealItem, {\n    id: meal.id,\n    name: meal.name,\n    price: meal.price,\n    description: meal.description\n  }, meal.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: styles.meals,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: mealsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AvailableMeals, \"M2q4J9G2gOS7ZfjD42iBymeW4II=\");\n\n_c = AvailableMeals;\nexport default AvailableMeals;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMeals\");","map":{"version":3,"sources":["C:/React.js/food-order/src/components/Meals/AvailableMeals.js"],"names":["React","useState","useEffect","useCallback","styles","Card","MealItem","AvailableMeals","props","meals","setMeals","isLoading","setIsLoading","error","setError","fetchMeals","response","fetch","ok","Error","responseData","json","console","log","loadedMeals","key","push","id","name","description","price","err","MealsLoading","mealsList","map","meal"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,QAAP,MAAqB,qBAArB;;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAAA;;AAChC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,EAAD,CAAlC,CAHgC,CAKhC;AACA;AACA;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,UAAU,GAAG,YAAY;AAC7B,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,0FAD0B,CAA5B;;AAGA,YAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB,gBAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACD;;AAED,cAAMC,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAA3B;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBH,YAApB;AACA,cAAMI,WAAW,GAAG,EAApB;;AACA,aAAK,MAAMC,GAAX,IAAkBL,YAAlB,EAAgC;AAC9BI,UAAAA,WAAW,CAACE,IAAZ,CAAiB;AACfC,YAAAA,EAAE,EAAEF,GADW;AAEfG,YAAAA,IAAI,EAAER,YAAY,CAACK,GAAD,CAAZ,CAAkBG,IAFT;AAGfC,YAAAA,WAAW,EAAET,YAAY,CAACK,GAAD,CAAZ,CAAkBI,WAHhB;AAIfC,YAAAA,KAAK,EAAEV,YAAY,CAACK,GAAD,CAAZ,CAAkBK;AAJV,WAAjB;AAMD;;AAEDpB,QAAAA,QAAQ,CAACc,WAAD,CAAR;AACAZ,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAtBD,CAsBE,OAAOmB,GAAP,EAAY;AACZT,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAiCQ,GAAjC,EADY,CAEZ;AACD;AACF,KA3BD;;AA4BAhB,IAAAA,UAAU;AACX,GA9BQ,EA8BN,EA9BM,CAAT;;AAgCA,MAAIJ,SAAJ,EAAe;AACb,wBACE;AAAS,MAAA,SAAS,EAAEP,MAAM,CAAC4B,YAA3B;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,QAAMC,SAAS,GAAGxB,KAAK,CAACyB,GAAN,CAAWC,IAAD,iBAC1B,QAAC,QAAD;AAEE,IAAA,EAAE,EAAEA,IAAI,CAACR,EAFX;AAGE,IAAA,IAAI,EAAEQ,IAAI,CAACP,IAHb;AAIE,IAAA,KAAK,EAAEO,IAAI,CAACL,KAJd;AAKE,IAAA,WAAW,EAAEK,IAAI,CAACN;AALpB,KACOM,IAAI,CAACR,EADZ;AAAA;AAAA;AAAA;AAAA,UADgB,CAAlB;AASA,sBACE;AAAS,IAAA,SAAS,EAAEvB,MAAM,CAACK,KAA3B;AAAA,2BACE,QAAC,IAAD;AAAA,6BACE;AAAA,kBAAKwB;AAAL;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAjED;;GAAM1B,c;;KAAAA,c;AAmEN,eAAeA,cAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport styles from \"./AvailableMeals.module.css\";\r\nimport Card from \"../UI/Card\";\r\nimport MealItem from \"./MealItem/MealItem\";\r\n\r\nconst AvailableMeals = (props) => {\r\n  const [meals, setMeals] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  // the function you pass to useEffect should not return a promise\r\n  //useEffect( async () => { }, []); you can't do it like this\r\n  // instead the function u pass to useEffect ma y return a cleanup function which can be executed\r\n  //this cleanupr run syncronously and not return a promise\r\n  useEffect(() => {\r\n    const fetchMeals = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://react-http-9a2e3-default-rtdb.asia-southeast1.firebasdfedatabase.app/meadls.json\"\r\n        );\r\n        if (!response.ok) {\r\n          throw new Error(\"Something wen wrong\");\r\n        }\r\n\r\n        const responseData = await response.json();\r\n        console.log(\"data\", responseData);\r\n        const loadedMeals = [];\r\n        for (const key in responseData) {\r\n          loadedMeals.push({\r\n            id: key,\r\n            name: responseData[key].name,\r\n            description: responseData[key].description,\r\n            price: responseData[key].price,\r\n          });\r\n        }\r\n\r\n        setMeals(loadedMeals);\r\n        setIsLoading(false);\r\n      } catch (err) {\r\n        console.log(\"errrrrrrrrrrrrrror\",err)\r\n        //setError(erro)\r\n      }\r\n    };\r\n    fetchMeals();\r\n  }, []);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <section className={styles.MealsLoading}>\r\n        <p> Loading...</p>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  const mealsList = meals.map((meal) => (\r\n    <MealItem\r\n      key={meal.id}\r\n      id={meal.id}\r\n      name={meal.name}\r\n      price={meal.price}\r\n      description={meal.description}\r\n    />\r\n  ));\r\n  return (\r\n    <section className={styles.meals}>\r\n      <Card>\r\n        <ul>{mealsList}</ul>\r\n      </Card>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default AvailableMeals;\r\n"]},"metadata":{},"sourceType":"module"}