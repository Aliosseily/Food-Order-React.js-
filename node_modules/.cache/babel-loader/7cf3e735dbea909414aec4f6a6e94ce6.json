{"ast":null,"code":"var _jsxFileName = \"C:\\\\React.js\\\\food-order\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n}; // state is the latest state snapshot of the state managed by the reducer\n// action is the saction dispatched by you later in yur code\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    //findIndex to find the index of added item in array\n    // check if the added item alraedy exists in state.items and return the index of it\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id); //get existing cart item by the index returned above (existingCartItemIndex)\n\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems; // if existingCartItem then updatedItem is equal to existingCartItem but with increase in amount\n\n    if (existingCartItem) {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      // if added item not found in state.items array the add it to the array\n      updatedItems = state.items.concat(action.item);\n    }\n\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === \"REMOVE\") {\n    // const updatedTotalAmount =\n    // state.totalAmount - action.item.amount;\n    const removedItemfind = state.items.find(item => item.id === action.id);\n    const removedItemfilter = state.items.find(item => item.id === action.id);\n    console.log(\"removedItemfind\", removedItemfind);\n    console.log(\"removedItemfilter\", removedItemfilter);\n    const updatedArray = { ...removedItemfilter,\n      amount: removedItemfilter.amount - 1\n    };\n    console.log(\"updatedArray\", updatedArray); //       console.log(\"hiiii\",action.id)\n    //       console.log(\"state.items\",state.items)\n    //       console.log(\"state.totalAmount\",state.totalAmount)\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  // the first element is always the state snapshot\n  // the second element is the function that allows you to dispatch action to the reducer\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/React.js/food-order/src/store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","existingCartItemIndex","findIndex","item","id","existingCartItem","updatedItems","updatedItem","amount","concat","updatedTotalAmount","price","removedItemfind","find","removedItemfilter","console","log","updatedArray","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,WAAW,EAAE;AAFU,CAAzB,C,CAIA;AACA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AACzB;AACA;AACA,UAAMC,qBAAqB,GAAGH,KAAK,CAACH,KAAN,CAAYO,SAAZ,CAC3BC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,MAAM,CAACI,IAAP,CAAYC,EADN,CAA9B,CAHyB,CAMzB;;AACA,UAAMC,gBAAgB,GAAGP,KAAK,CAACH,KAAN,CAAYM,qBAAZ,CAAzB;AACA,QAAIK,YAAJ,CARyB,CASzB;;AACA,QAAID,gBAAJ,EAAsB;AACpB,YAAME,WAAW,GAAG,EAClB,GAAGF,gBADe;AAElBG,QAAAA,MAAM,EAAEH,gBAAgB,CAACG,MAAjB,GAA0BT,MAAM,CAACI,IAAP,CAAYK;AAF5B,OAApB;AAIAF,MAAAA,YAAY,GAAG,CAAC,GAAGR,KAAK,CAACH,KAAV,CAAf;AACAW,MAAAA,YAAY,CAACL,qBAAD,CAAZ,GAAsCM,WAAtC;AACD,KAPD,MAOO;AACL;AACAD,MAAAA,YAAY,GAAGR,KAAK,CAACH,KAAN,CAAYc,MAAZ,CAAmBV,MAAM,CAACI,IAA1B,CAAf;AACD;;AACD,UAAMO,kBAAkB,GACtBZ,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACI,IAAP,CAAYQ,KAAZ,GAAoBZ,MAAM,CAACI,IAAP,CAAYK,MADtD;AAEA,WAAO;AACLb,MAAAA,KAAK,EAAEW,YADF;AAELV,MAAAA,WAAW,EAAEc;AAFR,KAAP;AAID;;AACD,MAAIX,MAAM,CAACC,IAAP,KAAgB,QAApB,EAA8B;AAC5B;AACA;AACA,UAAMY,eAAe,GAAGd,KAAK,CAACH,KAAN,CAAYkB,IAAZ,CAAiBV,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYL,MAAM,CAACK,EAA5C,CAAxB;AACA,UAAMU,iBAAiB,GAAGhB,KAAK,CAACH,KAAN,CAAYkB,IAAZ,CAAiBV,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYL,MAAM,CAACK,EAA5C,CAA1B;AAEAW,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA8BJ,eAA9B;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgCF,iBAAhC;AAEA,UAAMG,YAAY,GAAG,EAAC,GAAGH,iBAAJ;AAAwBN,MAAAA,MAAM,EAACM,iBAAiB,CAACN,MAAlB,GAA2B;AAA1D,KAArB;AAEIO,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BC,YAA3B,EAXwB,CAY9B;AACA;AACA;AACC;;AAED,SAAOvB,gBAAP;AACD,CA/CD;;AAiDA,MAAMwB,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B;AACA;AACA,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkC7B,UAAU,CAChDK,WADgD,EAEhDH,gBAFgD,CAAlD;;AAIA,QAAM4B,oBAAoB,GAAInB,IAAD,IAAU;AACrCkB,IAAAA,kBAAkB,CAAC;AAAErB,MAAAA,IAAI,EAAE,KAAR;AAAeG,MAAAA,IAAI,EAAEA;AAArB,KAAD,CAAlB;AACD,GAFD;;AAGA,QAAMoB,yBAAyB,GAAInB,EAAD,IAAQ;AACxCiB,IAAAA,kBAAkB,CAAC;AAAErB,MAAAA,IAAI,EAAE,QAAR;AAAkBI,MAAAA,EAAE,EAAEA;AAAtB,KAAD,CAAlB;AACD,GAFD;;AAIA,QAAMoB,WAAW,GAAG;AAClB7B,IAAAA,KAAK,EAAEyB,SAAS,CAACzB,KADC;AAElBC,IAAAA,WAAW,EAAEwB,SAAS,CAACxB,WAFL;AAGlB6B,IAAAA,OAAO,EAAEH,oBAHS;AAIlBI,IAAAA,UAAU,EAAEH;AAJM,GAApB;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACGL,KAAK,CAACQ;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA1BD;;GAAMT,Y;;KAAAA,Y;AA4BN,eAAeA,YAAf","sourcesContent":["import { useReducer } from \"react\";\r\nimport CartContext from \"./cart-context\";\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\n// state is the latest state snapshot of the state managed by the reducer\r\n// action is the saction dispatched by you later in yur code\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === \"ADD\") {\r\n    //findIndex to find the index of added item in array\r\n    // check if the added item alraedy exists in state.items and return the index of it\r\n    const existingCartItemIndex = state.items.findIndex(\r\n      (item) => item.id === action.item.id\r\n    );\r\n    //get existing cart item by the index returned above (existingCartItemIndex)\r\n    const existingCartItem = state.items[existingCartItemIndex];\r\n    let updatedItems;\r\n    // if existingCartItem then updatedItem is equal to existingCartItem but with increase in amount\r\n    if (existingCartItem) {\r\n      const updatedItem = {\r\n        ...existingCartItem,\r\n        amount: existingCartItem.amount + action.item.amount,\r\n      };\r\n      updatedItems = [...state.items];\r\n      updatedItems[existingCartItemIndex] = updatedItem;\r\n    } else {\r\n      // if added item not found in state.items array the add it to the array\r\n      updatedItems = state.items.concat(action.item);\r\n    }\r\n    const updatedTotalAmount =\r\n      state.totalAmount + action.item.price * action.item.amount;\r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatedTotalAmount,\r\n    };\r\n  }\r\n  if (action.type === \"REMOVE\") {\r\n    // const updatedTotalAmount =\r\n    // state.totalAmount - action.item.amount;\r\n    const removedItemfind = state.items.find(item => item.id === action.id);\r\n    const removedItemfilter = state.items.find(item => item.id === action.id);\r\n\r\n    console.log(\"removedItemfind\",removedItemfind)\r\n    console.log(\"removedItemfilter\",removedItemfilter)\r\n\r\n    const updatedArray = {...removedItemfilter , amount:removedItemfilter.amount - 1}\r\n\r\n        console.log(\"updatedArray\",updatedArray)\r\n  //       console.log(\"hiiii\",action.id)\r\n  //       console.log(\"state.items\",state.items)\r\n  //       console.log(\"state.totalAmount\",state.totalAmount)\r\n  }\r\n\r\n  return defaultCartState;\r\n};\r\n\r\nconst CartProvider = (props) => {\r\n  // the first element is always the state snapshot\r\n  // the second element is the function that allows you to dispatch action to the reducer\r\n  const [cartState, dispatchCartAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartState\r\n  );\r\n  const addItemToCartHandler = (item) => {\r\n    dispatchCartAction({ type: \"ADD\", item: item });\r\n  };\r\n  const removeItemFromCartHandler = (id) => {\r\n    dispatchCartAction({ type: \"REMOVE\", id: id });\r\n  };\r\n\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}