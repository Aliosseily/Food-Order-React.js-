{"ast":null,"code":"var _jsxFileName = \"C:\\\\React.js\\\\food-order\\\\src\\\\components\\\\Meals\\\\AvailableMeals.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport styles from \"./AvailableMeals.module.css\";\nimport Card from \"../UI/Card\";\nimport MealItem from \"./MealItem/MealItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AvailableMeals = props => {\n  _s();\n\n  const [meals, setMeals] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(\"\"); // the function you pass to useEffect should not return a promise\n  //useEffect( async () => { }, []); you can't do it like this\n  // instead the function u pass to useEffect ma y return a cleanup function which can be executed\n  //this cleanupr run syncronously and not return a promise\n\n  useEffect(() => {\n    const fetchMeals = async () => {\n      const response = await fetch(\"https://react-http-9a2e3-default-rtdb.asia-southeast1.firebasedatabase.app/meals\");\n\n      if (!response.ok) {\n        /* ewhen ew generate error like this and we pass a string to the constructor\r\n         that string will be stored in the message property of the created error object on catch */\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const responseData = await response.json();\n      console.log(\"data\", responseData);\n      const loadedMeals = [];\n\n      for (const key in responseData) {\n        loadedMeals.push({\n          id: key,\n          name: responseData[key].name,\n          description: responseData[key].description,\n          price: responseData[key].price\n        });\n      }\n\n      setMeals(loadedMeals);\n      setIsLoading(false);\n    };\n\n    try {\n      fetchMeals();\n    } catch (error) {\n      console.log(\"errorerror\", error);\n      setIsLoading(false);\n      setError(error.message);\n    }\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: styles.MealsLoading,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: styles.MealsError,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n  }\n\n  const mealsList = meals.map(meal => /*#__PURE__*/_jsxDEV(MealItem, {\n    id: meal.id,\n    name: meal.name,\n    price: meal.price,\n    description: meal.description\n  }, meal.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: styles.meals,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: mealsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AvailableMeals, \"frrsaj0QsVZRzsWdV1MAEqACYb0=\");\n\n_c = AvailableMeals;\nexport default AvailableMeals;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMeals\");","map":{"version":3,"sources":["C:/React.js/food-order/src/components/Meals/AvailableMeals.js"],"names":["React","useState","useEffect","useCallback","styles","Card","MealItem","AvailableMeals","props","meals","setMeals","isLoading","setIsLoading","error","setError","fetchMeals","response","fetch","ok","Error","responseData","json","console","log","loadedMeals","key","push","id","name","description","price","message","MealsLoading","MealsError","mealsList","map","meal"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport styles from \"./AvailableMeals.module.css\";\r\nimport Card from \"../UI/Card\";\r\nimport MealItem from \"./MealItem/MealItem\";\r\n\r\nconst AvailableMeals = (props) => {\r\n  const [meals, setMeals] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  // the function you pass to useEffect should not return a promise\r\n  //useEffect( async () => { }, []); you can't do it like this\r\n  // instead the function u pass to useEffect ma y return a cleanup function which can be executed\r\n  //this cleanupr run syncronously and not return a promise\r\n  useEffect(() => {\r\n    const fetchMeals = async () => {\r\n      const response = await fetch(\r\n        \"https://react-http-9a2e3-default-rtdb.asia-southeast1.firebasedatabase.app/meals\"\r\n      );\r\n      if (!response.ok) {\r\n        /* ewhen ew generate error like this and we pass a string to the constructor\r\n         that string will be stored in the message property of the created error object on catch */\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n\r\n      const responseData = await response.json();\r\n      console.log(\"data\", responseData);\r\n      const loadedMeals = [];\r\n      for (const key in responseData) {\r\n        loadedMeals.push({\r\n          id: key,\r\n          name: responseData[key].name,\r\n          description: responseData[key].description,\r\n          price: responseData[key].price,\r\n        });\r\n      }\r\n\r\n      setMeals(loadedMeals);\r\n      setIsLoading(false);\r\n    };\r\n    try {\r\n      fetchMeals();\r\n    } catch (error) {\r\n      console.log(\"errorerror\", error);\r\n      setIsLoading(false);\r\n      setError(error.message);\r\n    }\r\n  }, []);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <section className={styles.MealsLoading}>\r\n        <p> Loading...</p>\r\n      </section>\r\n    );\r\n  }\r\n  if (error) {\r\n    return (\r\n      <section className={styles.MealsError}>\r\n        <p>{error}</p>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  const mealsList = meals.map((meal) => (\r\n    <MealItem\r\n      key={meal.id}\r\n      id={meal.id}\r\n      name={meal.name}\r\n      price={meal.price}\r\n      description={meal.description}\r\n    />\r\n  ));\r\n  return (\r\n    <section className={styles.meals}>\r\n      <Card>\r\n        <ul>{mealsList}</ul>\r\n      </Card>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default AvailableMeals;\r\n"]},"metadata":{},"sourceType":"module"}